#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("messenger-api:server");
const http = require("http");
const { Server } = require("socket.io");
const userHandler = require("../WSEventHandlers/user-handler");
const chatHandler = require("../WSEventHandlers/chat-handler");
const friendHandler = require("../WSEventHandlers/friend-handler");
const commentHandler = require("../WSEventHandlers/comment-handler");
const { handleTokenWS } = require("../controllers/handle-token");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// Mount socketapi to server
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
  },
  connectionStateRecovery: {
    maxDisconnectionDuration: 2 * 60 * 1000,
    skipMiddlewares: true,
  },
});

// set up a JWT verify middleware to verify every socket connection to server before listeners are mounted
io.use(handleTokenWS);

// When a new conenction is made, mount all event handlers to the new socket
io.on("connection", (socket) => {
  if (socket.recovered) {
    console.log("connection recovered", socket.id, socket.rooms);
  } else {
    userHandler(socket, io);
    chatHandler(socket);
    friendHandler(socket);
    commentHandler(socket);
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`Listening on http://localhost:${process.env.PORT}`);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
